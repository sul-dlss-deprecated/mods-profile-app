<div id="mdrose"></div>

<script type="text/javascript">

	var mdElements  = [
		'abstract',
		'accessCondition', 
		'classification',
		'extension',
		'genre', 
		'identifier', 
		'language', 
		'location',
		'name', 
		'note', 
		'originInfo', 
		'part',
		'physicalDescription', 
		'recordInfo',
		'relatedItem',
		'subject',
		'tableOfContents',
		'targetAudience',
		'titleInfo', 
		'typeOfResource'];
	var modsEls2Degrees = {};
	var degrees2modsEls = {};
	function populateMappings() {
		d = 0;
		for (var i=0; i < mdElements.length; i++)
		{
			el = mdElements[i];
			modsEls2Degrees[el] = d;
			degrees2modsEls[d] = el;
			d = d + 360 / mdElements.length
		}
	}	
	populateMappings();

	var myData = {
		'abstract' : 53,
		'subject' : 110,
		'name' : 160,
		'identifier' : 313,
		'originInfo' : 152,
		'titleInfo' : 267,
		'typeOfResource' : 172};

	var myData2 = {
		'language' : 43,
		'subject' : 25,
		'name' : 43,
		'identifier' : 47,
		'originInfo' : 25,
		'titleInfo' : 47,
		'typeOfResource' : 15};

	function prepData(h) {
		var result = [];
		for (var k in h) {
	    // use hasOwnProperty to filter out keys from the Object.prototype
	    if (h.hasOwnProperty(k)) {
				result.push({
					d: modsEls2Degrees[k],  // direction (degrees of the circle)
					s: h[k] // size
				})
			}
		}
		return result;
	}
	
	var actual_json = {"responseHeader":
	{"status":0,
	"QTime":2,
	"params":{
			"qt":"top_level",
			"fq":"collection:kolb",
			"wt":"json",
			"json.nl":"arrarr"
			}
		},
	"response":	{
				"numFound":1402,
				"start":0,
				"maxScore":4.3902082,
				"docs":[]
		},
	"facet_counts": {
		"facet_queries": {
			"abstract_sim:*":1366,
			"identifier_sim:*":39
		},
		"facet_fields":{
			"language_sim":[
				["eng English",1361],
				["eng eng",34],
				[null,7]
			]
		},
		"facet_dates":{},
		"facet_ranges":{}
		}
	}
		

	// FIXME:  this should be replaced by "numFound" in Solr Response - the maximum possible
	function vizDataMax(vizData) {
		result = 0;
		for (var i=0; i < vizData.length; i++)
		{
			result = Math.max(result, vizData[i].s);
		}
		return result;
	}

	var vizData = prepData(myData);
	var dataMax = vizDataMax(vizData);

	// Width of the whole visualization; used for centering
	var vizSize = 400;

	// Map a degree to a color
	var valToColorScale = d3.scale.linear().domain([0, 360]).range(["hsl(20, 70%, 70%)", "hsl(700, 70%, 40%)"]).interpolate(d3.interpolateHsl);
	function arcToColor(d) {
		return valToColorScale(d.d);
	}
	
	// Map a number to a radius size
	numToRadiusScale = d3.scale.linear().domain([0, dataMax]).rangeRound([0, vizSize / 2 - 10]);
	function numToRadius(n) {
		return numToRadiusScale(n);
	}	

	drawMetadataRose(vizData, '#mdrose', vizSize);



	// Draw a complete metadata rose visualization, including axes
	function drawMetadataRose(mdRoseData, container, visWidth) {

		var r = visWidth / 2;  // radius of rose; also center pixel for rose width and height
			
		// The main SVG visualization element
		var vizEl = d3.select(container).append("svg:svg").attr("width", visWidth + "px").attr("height", (visWidth + 30) + "px");

		// Return short string to place at end of arc based on degree
		function arcText(d) {
			return degrees2modsEls[d.d].substring(0, Math.min(4, degrees2modsEls[d.d].length));
		};

		// Transformation to place a mark on top of an arc
		function arcTextT(d) {
			var tr = numToRadius(d.s);
			return "translate(" + visWidth/2 + "," + (visWidth/2 - tr) + ")" + "rotate(" + d.d + ",0," + tr + ")";
		};

		// Options for drawing the roseArc
		var arcOptions = {
			width: 16, // degrees of width to draw
			from: 0, // starting radius
			to: numToRadius
		}

		// Draw a single arc for the metadata rose
		// Input: Drawing options object containing
		//   width: degrees of width to draw (ie 5 or 15)
		//   from: integer, starting inner radius
		//   to: function returning the outer radius
		// Output: a function that when called, generates SVG paths.
		// It expects to be called via D3 with 
		//   array of data objects  with two parameters:
		//     d: direction in degrees
		//     s: size
		var roseArc = function(opts) {
			return d3.svg.arc().startAngle(function(d) {
				return d.d * Math.PI / 180;
			}).endAngle(function(d) {
				return (d.d + opts.width) * Math.PI / 180;
			}).innerRadius(opts.from).outerRadius(function(d) {
					return opts.to(d.s)
				});
			};

		function drawMetadataArcs(parentEl, plotData, colorFunc, arcTextFunc, arcTextT) {
			parentEl.append("svg:g").attr("class", "arcs").selectAll("path").data(plotData).enter().append("svg:path").attr("d", roseArc(arcOptions)).style("fill", colorFunc).attr("transform", "translate("+ visWidth / 2 + "," + visWidth / 2 + ")").append("svg:title").text(function(d) {
				return d.d + "\u00b0; " + d.s
			});
			
			// add text to arcs
			parentEl.append("svg:g").attr("class", "arctext").selectAll("text").data(plotData).enter().append("svg:text").text(arcTextFunc).attr("dy", "-3px").attr("transform", arcTextT);
		}

		drawMetadataArcs(vizEl, mdRoseData, arcToColor, arcText, arcTextT);
		
		
		// --- Draw Labels and Axes in the Rose ---
		
		// Axes circles - chart ticks
		var tickrings = d3.range(0, dataMax, dataMax / 10);
		vizEl.append("svg:g").attr("class", "axes").selectAll("circle").data(tickrings).enter().append("svg:circle").attr("stroke-width", 1).attr("stroke", "gray").attr("fill-opacity", 0.0).attr("cx", r).attr("cy", r).attr("r", numToRadiusScale);

		// Labels for axes circles
		var tickmarks = d3.range(20, dataMax, dataMax / 5);
		var tickLabel = function(d) {
			return "" + d;
		}
		vizEl.append("svg:g").attr("class", "tickmarks").selectAll("text").data(tickmarks).enter().append("svg:text").text(tickLabel).attr("dy", "-1px").attr("transform", function(d) {
			var y = visWidth - numToRadiusScale(d);
			y = y - 200;
			return "translate(" + r + "," + y + ") "
		})

		// Labels:  metadata elements
		var p = 20;  // center; probably broken if area not square
		vizEl.append("svg:g").attr("class", "labels").selectAll("text").data(mdElements).enter().append("svg:text").attr("dy", "-4px").attr("transform", function(d) {
			return "translate(" + r + "," + p + ") rotate(" + modsEls2Degrees[d] + ",0," + (r - p) + ")"
		}).text(function(d) {
			return d;
		});
	} // end drawMetadataRose

</script>

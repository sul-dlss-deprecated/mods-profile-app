<div id="chart"></div>
<%#script language="JavaScript">
d3table();
</script>
%>

<script type="text/javascript">
var w = 960,
    h = 500,
    i = 0,
    barHeight = 20,
    barWidth = w * .8,
    duration = 400,
    root;

var tree = d3.layout.tree()
    .size([h, 100]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var vis = d3.select("#chart").append("svg:svg")
    .attr("width", w)
    .attr("height", h)
  .append("svg:g")
    .attr("transform", "translate(20,30)");

var json_data = 		{	"name": "<mods><language>",
			"children": [
				{"name": "@objectPart", "size": 2},
				{"name": "@displayLabel", "size": 3},
				{"name": "@usage", "size": 3},
				{ "name": "<languageTerm>",
					"children" : [
						{"name": "@type", "size": 1},
						{"name": "@authority", "size": 1},
						{"name": "@authorityURI", "size": 1},
						{"name": "@valueURI", "size": 1},
						{"name": "values",
							"children": [
								{"name": "English", "size": 1},
								{"name": "French", "size": 1},
							]
						}
					]
				},
				{"name": "<scriptTerm>",
					"children" : [
						{"name": "@type", "size": 1},
						{"name": "@authority", "size": 1},
						{"name": "@authorityURI", "size": 1},
						{"name": "@valueURI", "size": 1},
						{"name": "values",
							"children": [
								{"name": "eng", "size": 1},
								{"name": "fre", "size": 1},
							]
						}
					]
				}
			]
		}
		
update(root = json_data);

function update(source) {

  // Compute the flattened node list. TODO use d3.layout.hierarchy.
  var nodes = tree.nodes(root);
  
  // Compute the "layout".
  nodes.forEach(function(n, i) {
    n.x = i * barHeight;
  });
  
  // Update the nodes…
  var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });
  
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .style("opacity", 1e-6);

  // Enter any new nodes at the parent's previous position.
  nodeEnter.append("svg:rect")
      .attr("y", -barHeight / 2)
      .attr("height", barHeight)
      .attr("width", barWidth)
      .style("fill", color)
      .on("click", click);
  
  nodeEnter.append("svg:text")
      .attr("dy", 3.5)
      .attr("dx", 5.5)
      .text(function(d) { return d.name; });
// NOTE:  we just had d.name
  
  // Transition nodes to their new position.
  nodeEnter.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
      .style("opacity", 1);
  
  node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
      .style("opacity", 1)
    .select("rect")
      .style("fill", color);
  
  // Transition exiting nodes to the parent's new position.
  node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .style("opacity", 1e-6)
      .remove();
  
  // Update the links…
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });
  
  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);
  
  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);
  
  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();
  
  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// NOTE:  here is the children thingy
// Toggle children on click.
function click(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
  update(d);
}

function color(d) {
  return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#fd8d3c";
}

</script>


<div id="content" class="span9">
  <h2 class="hide-text top-content-title"><%= t('blacklight.search.search_results_header') %></h2>

  <% @page_title = t('blacklight.search.title', :application_name => application_name) %>

	<h4><%= @facet_field.name %></h4>

	<table id="facetTable">
	  <thead>
	    <tr>
	      <th>Value</th>
	      <th>Count</th>
	    </tr>
	  </thead>
	  <tbody>
	    <%- @facet_field.items.each do |ff| -%>
	      <tr class="<%= cycle("odd", "even") %>">
	        <td>
	          <%= link_to(ff.value, catalog_index_path({:f=>{:language_languageTerm_sim=>[ff.value]}})) %>
	        </td>
	        <td><%= ff.hits %></td>
	      </tr>
	    <%- end -%>
	  </tbody>

	</table>
	<script type="text/javascript">
	  $("#facetTable").dataTable();
	  $("#facetTable_wrapper input").focus();
	</script>
</div>